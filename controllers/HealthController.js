const bluebird = require('bluebird');
const Health = require('../app/models/health');
const config = require('../configs/config');
const exec = require('child_process').exec;

module.exports = {
    /*
         Will be translated to get("/api/health") (first level is generated by controller name)
     */
    get_index(req, res) {

        res.send('Hello');
    },

    get_status(req, res) {
        var req_ip = req.headers['x-forwarded-for'] 
                    || req.headers['x-forward-for'] 
                    || req.connection.remoteAddress 
                    || req.socket.remoteAddress 
                    || req.connection.socket.remoteAddress
                    || "";

        req['clientIp'] = req_ip;
        req['timestamp'] = new Date().getTime();

        let reqPromiseArray = [];

        let cpu = exec('sar -u 1 2 | tail -1 | tail -n +1');
        let mem = exec('free -m');
        let diskIo = exec('iostat -xd 1 2 | tail -n +3 | head -n -1 | egrep -v "Device:|^$"');
        let diskUsed = exec('df -lk | tail -n +2');
        let networkConcurrence = exec('ss -s | grep ^TCP: | sed "s/[(),/]/ /g"');
        let networkBandwidth = exec('sar -n DEV 1 2 | grep ^Average: | tail -n +2');

        let obj = {
            cpu : cpu,
            mem : mem,
            diskIo : diskIo,
            diskUsed : diskUsed,
            networkConcurrence : networkConcurrence,
            networkBandwidth : networkBandwidth
        }
    
        bluebird.props(obj).then(function(result) {
            let count = 0;
            let data = {};

            for(let key in result){
                result[key].stdout.on('data', function (resp) {
                    data[key] = resp;
                    ++count;
                    if(6 == count){
                        let health = new Health(data, req);
                        res.json(health.getResult());
                    }
                });
            }
            
        });

    }
}